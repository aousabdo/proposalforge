openapi: 3.0.3
info:
  title: ProposalForge API
  description: |
    API specification for ProposalForge, an AI-powered RFP response tool.
    This API supports both the MVP single-user experience and the Enterprise collaborative platform.
  version: 1.0.0
  contact:
    name: ProposalForge Team
servers:
  - url: https://api.proposalforge.com/v1
    description: Production server
  - url: https://api-staging.proposalforge.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Local development

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
      required:
        - code
        - message

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - name
        - role
        - createdAt
        - updatedAt

    Workspace:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isArchived:
          type: boolean
        isCollaborative:
          type: boolean
        collaborationSettings:
          type: object
      required:
        - id
        - name
        - ownerId
        - createdAt
        - updatedAt
        - isArchived
        - isCollaborative

    WorkspaceUser:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        role:
          type: string
          enum: [owner, admin, editor, viewer]
        joinedAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
      required:
        - userId
        - workspaceId
        - role
        - joinedAt

    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: [rfp, sow, support, universal]
        category:
          type: string
        s3Key:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        status:
          type: string
          enum: [processing, ready, error]
        fileSize:
          type: integer
        mimeType:
          type: string
        metadata:
          type: object
        isGlobal:
          type: boolean
      required:
        - id
        - workspaceId
        - name
        - type
        - s3Key
        - createdAt
        - updatedAt
        - createdBy
        - status
        - isGlobal

    DocumentUploadResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        status:
          type: string
          enum: [processing, ready, error]
        uploadUrl:
          type: string
          description: Presigned URL for uploading the document
      required:
        - id
        - name
        - type
        - status
        - uploadUrl

    Proposal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [draft, in-progress, review, complete]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date-time
        customer:
          type: string
        estimatedValue:
          type: number
        metadata:
          type: object
      required:
        - id
        - workspaceId
        - name
        - status
        - createdAt
        - updatedAt
        - createdBy

    Outline:
      type: object
      properties:
        id:
          type: string
          format: uuid
        proposalId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        version:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        isActive:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/OutlineItem'
      required:
        - id
        - proposalId
        - name
        - version
        - createdAt
        - updatedAt
        - createdBy
        - isActive

    OutlineItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        outlineId:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
          nullable: true
        title:
          type: string
        order:
          type: integer
        sectionId:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        description:
          type: string
        estimatedLength:
          type: string
        status:
          type: string
          enum: [pending, in-progress, complete]
        children:
          type: array
          items:
            $ref: '#/components/schemas/OutlineItem'
      required:
        - id
        - outlineId
        - title
        - order
        - createdAt
        - updatedAt
        - status

    Section:
      type: object
      properties:
        id:
          type: string
          format: uuid
        proposalId:
          type: string
          format: uuid
        outlineId:
          type: string
          format: uuid
          nullable: true
        parentId:
          type: string
          format: uuid
          nullable: true
        order:
          type: integer
        title:
          type: string
        content:
          type: string
        status:
          type: string
          enum: [draft, in-review, approved]
        assignedTo:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        lastUpdatedBy:
          type: string
          format: uuid
          nullable: true
        wordCount:
          type: integer
        metadata:
          type: object
        reviewStatus:
          type: string
          enum: [pending, reviewed, changes-requested]
      required:
        - id
        - proposalId
        - title
        - status
        - createdAt
        - updatedAt
        - createdBy
        - reviewStatus

    WinTheme:
      type: object
      properties:
        id:
          type: string
          format: uuid
        proposalId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        priority:
          type: integer
        isActive:
          type: boolean
      required:
        - id
        - proposalId
        - name
        - createdAt
        - updatedAt
        - createdBy
        - isActive
    
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sectionId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resolved:
          type: boolean
        resolvedBy:
          type: string
          format: uuid
          nullable: true
        resolvedAt:
          type: string
          format: date-time
          nullable: true
        parentId:
          type: string
          format: uuid
          nullable: true
        position:
          type: object
          nullable: true
        user:
          $ref: '#/components/schemas/User'
      required:
        - id
        - sectionId
        - userId
        - content
        - createdAt
        - updatedAt
        - resolved
        
    ChatMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        proposalId:
          type: string
          format: uuid
          nullable: true
        userId:
          type: string
          format: uuid
          nullable: true
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        metadata:
          type: object
      required:
        - id
        - workspaceId
        - role
        - content
        - createdAt

    ExportFormat:
      type: string
      enum: [docx, pdf]
      
    FeatureFlag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        conditions:
          type: object
        metadata:
          type: object
      required:
        - id
        - name
        - enabled
        - createdAt
        - updatedAt

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        pagination:
          type: object
          properties:
            total:
              type: integer
            limit:
              type: integer
            offset:
              type: integer
            hasMore:
              type: boolean
          required:
            - total
            - limit
            - offset
            - hasMore
      required:
        - data
        - pagination

security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      summary: User login
      operationId: login
      security: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/Proposal'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/winthemes:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: List win themes for a proposal
      operationId: listProposalWinThemes
      tags:
        - WinThemes
      responses:
        '200':
          description: List of win themes for the proposal
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WinTheme'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Add win theme to proposal
      operationId: addProposalWinTheme
      tags:
        - WinThemes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                priority:
                  type: integer
                  default: 1
                isActive:
                  type: boolean
                  default: true
              required:
                - name
      responses:
        '201':
          description: Win theme added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WinTheme'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/winthemes/{themeId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: themeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    patch:
      summary: Update win theme
      operationId: updateWinTheme
      tags:
        - WinThemes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                priority:
                  type: integer
                isActive:
                  type: boolean
      responses:
        '200':
          description: Win theme updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WinTheme'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Win theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete win theme
      operationId: deleteWinTheme
      tags:
        - WinThemes
      responses:
        '204':
          description: Win theme deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Win theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/export:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    post:
      summary: Export proposal to document
      operationId: exportProposal
      tags:
        - Export
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                format:
                  $ref: '#/components/schemas/ExportFormat'
                includeComments:
                  type: boolean
                  default: false
                includeMetadata:
                  type: boolean
                  default: false
                template:
                  type: string
                  nullable: true
              required:
                - format
      responses:
        '202':
          description: Export started
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [pending, processing, completed, failed]
                required:
                  - id
                  - status
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/export/{exportId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: exportId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get export status
      operationId: getExportStatus
      tags:
        - Export
      responses:
        '200':
          description: Export status
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [pending, processing, completed, failed]
                  url:
                    type: string
                    format: uri
                    nullable: true
                  expiresAt:
                    type: string
                    format: date-time
                    nullable: true
                required:
                  - id
                  - status
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Export job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/chat:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get chat history for a workspace
      operationId: getWorkspaceChatHistory
      tags:
        - Chat
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Chat history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Send message to chat
      operationId: sendChatMessage
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                proposalId:
                  type: string
                  format: uuid
                  nullable: true
                metadata:
                  type: object
              required:
                - content
      responses:
        '201':
          description: Chat message sent and response received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/featureflags:
    get:
      summary: List all feature flags
      operationId: listFeatureFlags
      tags:
        - Admin
        - FeatureFlags
      responses:
        '200':
          description: List of feature flags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureFlag'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create new feature flag
      operationId: createFeatureFlag
      tags:
        - Admin
        - FeatureFlags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                enabled:
                  type: boolean
                  default: false
                conditions:
                  type: object
              required:
                - name
      responses:
        '201':
          description: Feature flag created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/featureflags/{flagId}:
    parameters:
      - name: flagId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    patch:
      summary: Update feature flag
      operationId: updateFeatureFlag
      tags:
        - Admin
        - FeatureFlags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                enabled:
                  type: boolean
                conditions:
                  type: object
      responses:
        '200':
          description: Feature flag updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Feature flag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete feature flag
      operationId: deleteFeatureFlag
      tags:
        - Admin
        - FeatureFlags
      responses:
        '204':
          description: Feature flag deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Feature flag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /featureflags:
    get:
      summary: Get enabled feature flags for current user
      operationId: getUserFeatureFlags
      tags:
        - FeatureFlags
      responses:
        '200':
          description: Enabled feature flags for user
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/sections/{sectionId}/versions:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: sectionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get section version history
      operationId: getSectionVersions
      tags:
        - Sections
      responses:
        '200':
          description: Section version history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SectionVersion'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Section not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/sections/{sectionId}/versions/{versionNumber}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: sectionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: versionNumber
        in: path
        required: true
        schema:
          type: integer
    
    get:
      summary: Get specific section version
      operationId: getSectionVersion
      tags:
        - Sections
      responses:
        '200':
          description: Section version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionVersion'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Section version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Restore section to version
      operationId: restoreSectionVersion
      tags:
        - Sections
      responses:
        '200':
          description: Section restored to version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Section version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/sections/{sectionId}/comments:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: sectionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: List comments for a section
      operationId: listSectionComments
      tags:
        - Comments
      parameters:
        - name: resolved
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of comments for the section
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Section not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Add comment to section
      operationId: addSectionComment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                position:
                  type: object
                  nullable: true
              required:
                - content
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Section not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/sections/{sectionId}/comments/{commentId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: sectionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: commentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    patch:
      summary: Update comment
      operationId: updateComment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                resolved:
                  type: boolean
              required:
                - content
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete comment
      operationId: deleteComment
      tags:
        - Comments
      responses:
        '204':
          description: Comment deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/sections:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: List sections for a proposal
      operationId: listProposalSections
      tags:
        - Sections
      parameters:
        - name: outlineId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, in-review, approved]
        - name: assignedTo
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of sections for the proposal
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Section'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new section
      operationId: createSection
      tags:
        - Sections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                outlineId:
                  type: string
                  format: uuid
                  nullable: true
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                title:
                  type: string
                content:
                  type: string
                order:
                  type: integer
                status:
                  type: string
                  enum: [draft, in-review, approved]
                  default: draft
                assignedTo:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - title
      responses:
        '201':
          description: Section created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/sections/generate:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    post:
      summary: Generate section content using AI
      operationId: generateSection
      tags:
        - Sections
        - AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                outlineItemId:
                  type: string
                  format: uuid
                instructions:
                  type: string
                  description: Specific instructions for the AI
                considerWinThemes:
                  type: boolean
                  default: true
              required:
                - outlineItemId
      responses:
        '202':
          description: Section generation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [pending, processing, completed, failed]
                required:
                  - id
                  - status
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal or outline item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/sections/{sectionId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: sectionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get section details
      operationId: getSection
      tags:
        - Sections
      responses:
        '200':
          description: Section details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Section not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: Update section
      operationId: updateSection
      tags:
        - Sections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                order:
                  type: integer
                status:
                  type: string
                  enum: [draft, in-review, approved]
                reviewStatus:
                  type: string
                  enum: [pending, reviewed, changes-requested]
                assignedTo:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        '200':
          description: Section updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Section not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete section
      operationId: deleteSection
      tags:
        - Sections
      responses:
        '204':
          description: Section deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Section not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: Update proposal details
      operationId: updateProposal
      tags:
        - Proposals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [draft, in-progress, review, complete]
                customer:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                estimatedValue:
                  type: number
                metadata:
                  type: object
      responses:
        '200':
          description: Proposal updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete proposal
      operationId: deleteProposal
      tags:
        - Proposals
      responses:
        '204':
          description: Proposal deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/outlines:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: List outlines for a proposal
      operationId: listProposalOutlines
      tags:
        - Outlines
      responses:
        '200':
          description: List of outlines for the proposal
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Outline'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new outline
      operationId: createOutline
      tags:
        - Outlines
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
                - name
      responses:
        '201':
          description: Outline created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outline'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/outlines/generate:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    post:
      summary: Generate an outline using AI
      operationId: generateOutline
      tags:
        - Outlines
        - AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: "AI Generated Outline"
                instructions:
                  type: string
                  description: Specific instructions for the AI
                documentIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Specific documents to use for context (defaults to all in workspace)
              required:
                - name
      responses:
        '202':
          description: Outline generation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [pending, processing, completed, failed]
                required:
                  - id
                  - status
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/outlines/{outlineId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outlineId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get outline details
      operationId: getOutline
      tags:
        - Outlines
      responses:
        '200':
          description: Outline details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outline'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Outline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: Update outline details
      operationId: updateOutline
      tags:
        - Outlines
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                isActive:
                  type: boolean
      responses:
        '200':
          description: Outline updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outline'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Outline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete outline
      operationId: deleteOutline
      tags:
        - Outlines
      responses:
        '204':
          description: Outline deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Outline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/outlines/{outlineId}/items:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outlineId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    post:
      summary: Add item to outline
      operationId: addOutlineItem
      tags:
        - Outlines
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                order:
                  type: integer
                description:
                  type: string
                estimatedLength:
                  type: string
              required:
                - title
                - order
      responses:
        '201':
          description: Outline item added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutlineItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Outline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}/outlines/{outlineId}/items/{itemId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outlineId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    patch:
      summary: Update outline item
      operationId: updateOutlineItem
      tags:
        - Outlines
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                order:
                  type: integer
                status:
                  type: string
                  enum: [pending, in-progress, complete]
                description:
                  type: string
                estimatedLength:
                  type: string
      responses:
        '200':
          description: Outline item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutlineItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Outline item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete outline item
      operationId: deleteOutlineItem
      tags:
        - Outlines
      responses:
        '204':
          description: Outline item deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Outline item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'ref: '#/components/schemas/User'
                required:
                  - token
                  - user
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      summary: Register a new user
      operationId: register
      security: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                name:
                  type: string
              required:
                - email
                - password
                - name
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                required:
                  - user
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      summary: Get current user information
      operationId: getCurrentUser
      tags:
        - Authentication
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces:
    get:
      summary: List workspaces
      operationId: listWorkspaces
      tags:
        - Workspaces
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: includeArchived
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of workspaces
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Workspace'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new workspace
      operationId: createWorkspace
      tags:
        - Workspaces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
                - name
      responses:
        '201':
          description: Workspace created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get workspace details
      operationId: getWorkspace
      tags:
        - Workspaces
      responses:
        '200':
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: Update workspace details
      operationId: updateWorkspace
      tags:
        - Workspaces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                isArchived:
                  type: boolean
      responses:
        '200':
          description: Workspace updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete workspace
      operationId: deleteWorkspace
      tags:
        - Workspaces
      responses:
        '204':
          description: Workspace deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/users:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: List users in a workspace
      operationId: listWorkspaceUsers
      tags:
        - Workspaces
        - Users
      responses:
        '200':
          description: List of users in the workspace
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Add a user to a workspace
      operationId: addWorkspaceUser
      tags:
        - Workspaces
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [admin, editor, viewer]
              required:
                - email
                - role
      responses:
        '201':
          description: User added to workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUser'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/users/{userId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    patch:
      summary: Update user role in workspace
      operationId: updateWorkspaceUserRole
      tags:
        - Workspaces
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [admin, editor, viewer]
              required:
                - role
      responses:
        '200':
          description: User role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUser'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Remove user from workspace
      operationId: removeWorkspaceUser
      tags:
        - Workspaces
        - Users
      responses:
        '204':
          description: User removed from workspace
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/documents:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: List documents in a workspace
      operationId: listWorkspaceDocuments
      tags:
        - Documents
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [rfp, sow, support, universal]
        - name: category
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of documents in the workspace
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Document'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create document upload request
      operationId: createDocumentUploadRequest
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                type:
                  type: string
                  enum: [rfp, sow, support, universal]
                category:
                  type: string
                mimeType:
                  type: string
                fileSize:
                  type: integer
                isGlobal:
                  type: boolean
                  default: false
              required:
                - name
                - type
                - mimeType
                - fileSize
      responses:
        '201':
          description: Document upload request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/documents/{documentId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get document details
      operationId: getDocument
      tags:
        - Documents
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: Update document metadata
      operationId: updateDocument
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                category:
                  type: string
                metadata:
                  type: object
      responses:
        '200':
          description: Document updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete document
      operationId: deleteDocument
      tags:
        - Documents
      responses:
        '204':
          description: Document deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/documents/{documentId}/download:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get document download URL
      operationId: getDocumentDownloadUrl
      tags:
        - Documents
      responses:
        '200':
          description: Document download URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                  expiresAt:
                    type: string
                    format: date-time
                required:
                  - url
                  - expiresAt
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: List proposals in a workspace
      operationId: listWorkspaceProposals
      tags:
        - Proposals
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, in-progress, review, complete]
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of proposals in the workspace
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Proposal'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new proposal
      operationId: createProposal
      tags:
        - Proposals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                customer:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                estimatedValue:
                  type: number
              required:
                - name
      responses:
        '201':
          description: Proposal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /workspaces/{workspaceId}/proposals/{proposalId}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: proposalId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get proposal details
      operationId: getProposal
      tags:
        - Proposals
      responses:
        '200':
          description: Proposal details
          content:
            application/json:
              schema:
                $